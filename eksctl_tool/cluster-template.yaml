apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: CLUSTER_NAME
  region: AWS_REGION
  version: "EKS_VERSION"
availabilityZones: ["ZONE_A", "ZONE_B", "ZONE_C"]


iam:
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
      wellKnownPolicies:
        autoScaler: true
      roleName: cluster-autoscaler-role-CLUSTER_NAME
      roleOnly: true
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      roleName: aws-lb-controller-CLUSTER_NAME
      wellKnownPolicies:
        awsLoadBalancerController: true

managedNodeGroups:
  - name: "satori-nodes-1"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/CLUSTER_NAME: "owned"
    instanceType: m6i.large 
    minSize: 1
    maxSize: 5
    volumeSize: 50
    desiredCapacity: 1
    privateNetworking: true
    availabilityZones: ["ZONE_A"]
    subnets:
      - private-subnet-a

  - name: "satori-nodes-2"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/CLUSTER_NAME: "owned"
    instanceType: m6i.large 
    minSize: 1
    maxSize: 5
    volumeSize: 50
    desiredCapacity: 1
    privateNetworking: true
    availabilityZones: ["ZONE_B"]
    subnets:
      - private-subnet-b
      
  - name: "satori-nodes-3"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/CLUSTER_NAME: "owned"
    instanceType: m6i.large 
    minSize: 1
    maxSize: 5
    volumeSize: 50
    desiredCapacity: 1
    privateNetworking: true
    availabilityZones: ["ZONE_C"]
    subnets:
      - private-subnet-c

addons:
- name: vpc-cni 
  version: latest
  attachPolicyARNs:
    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
- name: coredns
  version: latest
- name: kube-proxy
  version: latest

vpc:
  nat:
    gateway: NAT_GW_CONFIG  
  clusterEndpoints:
    publicAccess:  true
    privateAccess: true
   # cidr: "10.0.0.0/16"
 # # # # # # id: VPC_ID
 # # # # # # subnets: 
 # # # # # #   private:
 # # # # # #     private-subnet-a:
 # # # # # #       id: "PRIVATE_SUB1_ID"
 # # # # # #     private-subnet-b:
 # # # # # #       id: "PRIVATE_SUB2_ID"
 # # # # # #     private-subnet-c:
 # # # # # #       id: "PRIVATE_SUB3_ID"
 # # # # # #   public: 
 # # # # # #     public-subnet-a:
 # # # # # #       id: "PUBLIC_SUB1_ID"
 # # # # # #     public-subnet-b:
 # # # # # #       id: "PUBLIC_SUB2_ID"
 # # # # # #     public-subnet-c:
 # # # # # #       id: "PUBLIC_SUB3_ID"